package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func gitignore() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0xcb,
		0x4f, 0x49, 0x8d, 0xcf, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0x2d, 0xe6, 0x02,
		0x04, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xee, 0xe3, 0x94, 0x0d, 0x00, 0x00,
		0x00,
	},
		".gitignore",
	)
}

func app_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xec, 0x5a,
		0x5f, 0x73, 0xdc, 0xb6, 0x11, 0x7f, 0x96, 0x3e, 0x05, 0x9c, 0x87, 0x90,
		0xac, 0xaf, 0x94, 0x62, 0xe5, 0xa5, 0x77, 0xd5, 0x74, 0x1a, 0xd9, 0x99,
		0x51, 0xa7, 0x89, 0x54, 0xd9, 0x33, 0x7d, 0xd0, 0x68, 0x38, 0x14, 0x89,
		0xd3, 0xb1, 0xe6, 0x91, 0x34, 0x08, 0xea, 0xcf, 0x38, 0xf7, 0xdd, 0xbb,
		0x8b, 0xff, 0x20, 0x79, 0x27, 0x9d, 0xa3, 0xe4, 0x89, 0x4a, 0xc6, 0x77,
		0x00, 0x76, 0x17, 0xbf, 0x5d, 0x2c, 0x16, 0xfb, 0xb3, 0x7c, 0xf4, 0x17,
		0xf1, 0x73, 0x44, 0xc2, 0x65, 0x57, 0x65, 0xbc, 0xa8, 0xab, 0x70, 0x5d,
		0xe7, 0x5d, 0x49, 0xdb, 0x88, 0x7c, 0x25, 0x47, 0x47, 0xe4, 0x81, 0xde,
		0x36, 0x69, 0xf6, 0xf9, 0xa7, 0xba, 0xe6, 0x2d, 0x67, 0x69, 0x73, 0x68,
		0x34, 0x0e, 0x60, 0xf5, 0xd3, 0x8a, 0x12, 0x29, 0x4f, 0xb2, 0x34, 0x5b,
		0x51, 0x67, 0xf5, 0x3e, 0x65, 0xa4, 0xa8, 0x5a, 0x9e, 0x96, 0x25, 0xcd,
		0x7f, 0x91, 0x36, 0xc9, 0x29, 0xf9, 0xba, 0x59, 0x1c, 0x0e, 0x6d, 0x30,
		0xfa, 0xa5, 0x2b, 0x18, 0x25, 0x1a, 0x84, 0x23, 0xa1, 0xa7, 0x48, 0x92,
		0x28, 0x2c, 0x89, 0x92, 0x4e, 0x12, 0x85, 0xf5, 0x3c, 0x07, 0xb0, 0xae,
		0x55, 0x34, 0x7b, 0xb6, 0xa2, 0xd9, 0x67, 0x52, 0x2c, 0x35, 0xbe, 0xa2,
		0x05, 0x38, 0x03, 0x94, 0x07, 0xc5, 0x32, 0xec, 0xa3, 0xbc, 0xd6, 0x56,
		0x6f, 0x22, 0x57, 0xf2, 0x80, 0x51, 0xde, 0xb1, 0x6a, 0xe0, 0x94, 0x15,
		0x8f, 0xe9, 0x63, 0x53, 0x33, 0xde, 0x2e, 0x06, 0x58, 0x18, 0x4d, 0x39,
		0x25, 0x29, 0xa9, 0xe8, 0x83, 0xc6, 0x13, 0xa6, 0x55, 0x4e, 0x9a, 0x8e,
		0x93, 0x02, 0xfe, 0xaf, 0x78, 0x4d, 0xf8, 0x4a, 0x05, 0xd1, 0xdb, 0x15,
		0xc3, 0xa8, 0x34, 0x4e, 0x77, 0x6c, 0x8d, 0x91, 0xf5, 0xc0, 0x2a, 0x28,
		0x73, 0x08, 0xf8, 0xcc, 0x5b, 0x28, 0xf2, 0x39, 0xd1, 0x6a, 0xfe, 0x4a,
		0x59, 0xa7, 0x39, 0x85, 0xd5, 0x65, 0x5a, 0xb6, 0x5e, 0x8c, 0x36, 0x03,
		0x87, 0x3e, 0x3c, 0xd2, 0xac, 0x03, 0x8f, 0xb8, 0x3d, 0xff, 0x91, 0xa3,
		0x3b, 0x58, 0x0f, 0x22, 0x94, 0x01, 0x7c, 0x75, 0x6a, 0x3a, 0x5a, 0x33,
		0x65, 0x41, 0x7f, 0xda, 0xf9, 0x91, 0x13, 0x8f, 0x06, 0x50, 0x7e, 0x2e,
		0xd3, 0x3b, 0x17, 0x47, 0xda, 0x12, 0xe9, 0xc8, 0x10, 0x48, 0x2c, 0x17,
		0x20, 0x56, 0x9c, 0x75, 0x74, 0x60, 0xe9, 0x4a, 0x9e, 0x2f, 0xda, 0x52,
		0x10, 0x48, 0xbd, 0x74, 0x4c, 0xbb, 0xe2, 0x2a, 0x17, 0x7c, 0xc4, 0x0b,
		0x47, 0x62, 0x73, 0xd8, 0x4b, 0x73, 0x94, 0x69, 0xdd, 0x88, 0x81, 0xf5,
		0xdb, 0xff, 0xd1, 0x8c, 0x93, 0xd0, 0xfa, 0xa9, 0x56, 0xc0, 0x4f, 0x47,
		0x79, 0x24, 0x0c, 0xf1, 0x1a, 0x9c, 0x50, 0xc2, 0xfd, 0xfb, 0x34, 0xd8,
		0x68, 0x90, 0xf4, 0x63, 0x06, 0xb3, 0x91, 0xf4, 0xea, 0x5b, 0xb6, 0x7a,
		0x4d, 0x77, 0x5b, 0x16, 0x59, 0xd2, 0xa4, 0x7c, 0x95, 0x24, 0xcf, 0x58,
		0x6e, 0xc0, 0xf2, 0x77, 0xdf, 0xf5, 0x6d, 0xfd, 0x1b, 0x8e, 0x82, 0xd0,
		0x8a, 0xb3, 0x27, 0x73, 0x70, 0x70, 0x1f, 0x54, 0x58, 0x55, 0x3c, 0x1d,
		0x0d, 0xb5, 0x30, 0x56, 0x03, 0x8e, 0x23, 0x27, 0xee, 0x1b, 0x13, 0xb8,
		0xdf, 0xff, 0x73, 0x64, 0xcd, 0x86, 0xd7, 0xf0, 0x9d, 0x1c, 0x13, 0x35,
		0x77, 0x44, 0x7a, 0xd5, 0x72, 0x46, 0x76, 0x26, 0x2d, 0x56, 0xa7, 0x83,
		0xa0, 0x83, 0x53, 0x81, 0x1a, 0x5a, 0x64, 0x3c, 0x80, 0x68, 0x38, 0x85,
		0x0d, 0xae, 0x3f, 0x65, 0x75, 0x73, 0x25, 0xe5, 0xdf, 0xd3, 0x65, 0xda,
		0x95, 0x3c, 0x84, 0xec, 0xc0, 0x1a, 0xac, 0x3c, 0x87, 0x11, 0xf9, 0xfe,
		0x7b, 0xfc, 0x88, 0x93, 0x84, 0xb6, 0xf2, 0x84, 0xc8, 0x3f, 0xc4, 0x3c,
		0x5c, 0x72, 0x12, 0xe4, 0x52, 0x2d, 0x98, 0x8b, 0xa9, 0xcd, 0x82, 0x40,
		0x06, 0x8a, 0xea, 0x01, 0x38, 0x52, 0xc8, 0xb2, 0xd3, 0xd1, 0xe0, 0xfd,
		0x80, 0x17, 0xca, 0x11, 0x7b, 0x87, 0x72, 0xe3, 0x78, 0xa4, 0x80, 0x95,
		0xff, 0x48, 0x53, 0x96, 0xad, 0xfe, 0xd9, 0x34, 0x5b, 0x4c, 0xbf, 0x1b,
		0x11, 0xdd, 0x65, 0xde, 0x08, 0x09, 0x3d, 0x05, 0xe7, 0xda, 0xf8, 0x75,
		0x13, 0x33, 0x5a, 0xe5, 0x94, 0x85, 0x23, 0x2b, 0x99, 0xa8, 0xaf, 0x1f,
		0x4a, 0xba, 0x86, 0x8c, 0x72, 0x2c, 0xb9, 0x42, 0x33, 0x08, 0x52, 0x56,
		0xa6, 0x6d, 0xfb, 0x6b, 0xba, 0xa6, 0x73, 0x72, 0xa6, 0xbf, 0x42, 0xca,
		0xcc, 0x48, 0x5e, 0x67, 0x1d, 0xea, 0xc6, 0x77, 0x94, 0x2b, 0x33, 0x3f,
		0x3d, 0x9d, 0xe7, 0x61, 0xc0, 0xe0, 0xdd, 0x0b, 0x22, 0x5d, 0x75, 0x20,
		0xbf, 0xb0, 0x64, 0x92, 0x1f, 0x9e, 0x4f, 0x04, 0x79, 0xe6, 0x7e, 0x7d,
		0x00, 0xe7, 0xaf, 0x10, 0x7b, 0xcf, 0xda, 0xbb, 0x57, 0x4d, 0xab, 0x0b,
		0x51, 0x54, 0x62, 0xf0, 0xbb, 0xa8, 0xe8, 0x25, 0xc4, 0x99, 0x32, 0xfe,
		0x14, 0x1a, 0x3b, 0x81, 0xcd, 0x9e, 0x00, 0x42, 0x72, 0x78, 0x40, 0xc8,
		0x7d, 0x5a, 0x76, 0x10, 0x11, 0xac, 0x89, 0x87, 0x07, 0x1b, 0x7b, 0x6a,
		0x32, 0xaa, 0x22, 0x50, 0x80, 0xdc, 0x34, 0x08, 0x24, 0xc4, 0xb4, 0x34,
		0x23, 0x6f, 0xa3, 0x82, 0xb6, 0x21, 0x4f, 0x19, 0x44, 0x71, 0x46, 0x1a,
		0x98, 0x12, 0x5d, 0xc4, 0xb2, 0x66, 0x24, 0x14, 0xed, 0x00, 0x98, 0x39,
		0x5e, 0xc0, 0xc7, 0xdf, 0xe5, 0x62, 0x5c, 0xd2, 0xea, 0x8e, 0xaf, 0x60,
		0xe6, 0xed, 0x5b, 0x14, 0x44, 0x99, 0x9c, 0xb6, 0x19, 0x2b, 0x1a, 0x0e,
		0x3a, 0xa7, 0x52, 0xea, 0xba, 0xb8, 0x59, 0x38, 0xd3, 0x31, 0xad, 0xe0,
		0xa8, 0x58, 0x7a, 0x2b, 0x5e, 0xc4, 0xf1, 0xf9, 0xdf, 0x7e, 0x93, 0x8f,
		0x98, 0xa7, 0x97, 0xd5, 0xd5, 0xb2, 0xb8, 0xeb, 0xb4, 0xa6, 0x78, 0x02,
		0xb0, 0x3f, 0x08, 0x03, 0x11, 0x80, 0x00, 0xdb, 0x03, 0x2b, 0x1e, 0xb9,
		0xaa, 0x0f, 0xac, 0xe0, 0x9e, 0xda, 0x78, 0x90, 0xb5, 0xe7, 0x8e, 0xe6,
		0x67, 0xfa, 0xe4, 0x8e, 0x23, 0xb8, 0x96, 0xf0, 0x9f, 0xba, 0xd3, 0x36,
		0xa2, 0x67, 0x35, 0x94, 0x5e, 0xd6, 0x65, 0x20, 0x22, 0x02, 0xc7, 0x6b,
		0x34, 0x0a, 0xc7, 0x05, 0x05, 0x99, 0x17, 0xd9, 0xa5, 0x0e, 0x25, 0xc2,
		0xb5, 0xcb, 0xd1, 0x30, 0xf8, 0x8e, 0xa1, 0x58, 0x08, 0xf2, 0xa7, 0x86,
		0xba, 0x26, 0x23, 0xe9, 0xb3, 0x67, 0x77, 0x97, 0x15, 0x1f, 0xc2, 0x42,
		0x43, 0x77, 0x24, 0x16, 0xa2, 0xd8, 0x44, 0xa1, 0x4d, 0x1c, 0x08, 0x02,
		0x44, 0xca, 0x78, 0x07, 0xc3, 0x30, 0x79, 0x84, 0x14, 0x7e, 0x7c, 0x87,
		0x7f, 0x9c, 0xe8, 0xa3, 0x4e, 0xd2, 0xbb, 0x14, 0x62, 0xae, 0x63, 0x9a,
		0x68, 0x85, 0x39, 0x79, 0x58, 0x15, 0xd8, 0x21, 0x49, 0x01, 0x2d, 0xae,
		0x5e, 0x4b, 0x28, 0x20, 0x8f, 0x32, 0xb9, 0x30, 0xe6, 0x62, 0x08, 0x66,
		0x19, 0xcd, 0x68, 0x71, 0x4f, 0x99, 0x18, 0x9f, 0xc8, 0x73, 0xc7, 0x04,
		0x4a, 0xa1, 0x68, 0xa0, 0x0e, 0x60, 0xe0, 0x62, 0xb5, 0xab, 0xa4, 0xb7,
		0xf9, 0xc2, 0xee, 0xaf, 0x72, 0x05, 0xe3, 0xa2, 0x37, 0x39, 0x3d, 0x25,
		0x55, 0x57, 0x96, 0x91, 0xdd, 0xf5, 0x67, 0x85, 0xce, 0x86, 0x75, 0x61,
		0x12, 0x16, 0x96, 0x55, 0x46, 0xc0, 0x3e, 0x17, 0x0f, 0x95, 0xce, 0x88,
		0xf7, 0xe6, 0xe0, 0x95, 0x61, 0x0b, 0x5c, 0x9d, 0x83, 0xd4, 0x3e, 0x75,
		0x70, 0x69, 0x77, 0x0d, 0x74, 0x6b, 0xf9, 0x52, 0xef, 0x7c, 0xb1, 0x54,
		0xf6, 0x94, 0x15, 0x2d, 0x6b, 0x50, 0x9b, 0x67, 0xc3, 0x71, 0x77, 0x43,
		0x28, 0xb8, 0x09, 0x4b, 0xc9, 0xa3, 0x89, 0xcc, 0x02, 0xa3, 0xa7, 0x2e,
		0x1a, 0xa2, 0xc2, 0xf1, 0x09, 0x8c, 0x75, 0x38, 0x17, 0xfd, 0x43, 0x82,
		0x4b, 0xc4, 0x8b, 0xaa, 0xa3, 0xf6, 0xb4, 0x64, 0x46, 0x0b, 0xd3, 0x23,
		0x97, 0xc9, 0x81, 0x82, 0xc3, 0x58, 0xac, 0x3a, 0x58, 0xd0, 0x53, 0x73,
		0x36, 0x42, 0x02, 0x46, 0xd2, 0x29, 0x3d, 0xdd, 0x0f, 0xce, 0x98, 0x67,
		0x6a, 0x4e, 0xaa, 0xc8, 0x26, 0x53, 0xbb, 0xa0, 0xae, 0xdc, 0xe6, 0xcf,
		0x7a, 0x72, 0xed, 0x1e, 0xe2, 0xb5, 0x39, 0x03, 0x2c, 0x82, 0x8a, 0x48,
		0x9a, 0x51, 0x65, 0x70, 0x1b, 0x9d, 0xcb, 0xa3, 0x2f, 0xf5, 0x1b, 0xb3,
		0x4c, 0xf4, 0x17, 0xe8, 0x3d, 0x5d, 0x41, 0x94, 0xe4, 0x2b, 0x56, 0x3f,
		0x08, 0x12, 0xf1, 0x09, 0xb2, 0xe0, 0x03, 0x63, 0x90, 0x58, 0xc1, 0x59,
		0x5a, 0x55, 0x35, 0x27, 0xe8, 0x34, 0x30, 0x0c, 0xb1, 0x29, 0x36, 0xc1,
		0xa9, 0xb9, 0x80, 0x81, 0x0c, 0x41, 0xcf, 0xff, 0x15, 0x85, 0xa2, 0xd6,
		0x86, 0x6d, 0x77, 0x2b, 0x2a, 0x3c, 0xdc, 0xf3, 0x0e, 0x52, 0x40, 0x7c,
		0xd7, 0xa0, 0x30, 0xd5, 0x00, 0x85, 0x5d, 0x20, 0x6f, 0xe0, 0x30, 0x02,
		0x63, 0x17, 0xa3, 0xd3, 0x5b, 0xd4, 0xe9, 0x37, 0x8a, 0xf4, 0x23, 0xca,
		0xe2, 0x93, 0xc6, 0x68, 0xdb, 0x22, 0x8c, 0x75, 0xd7, 0x72, 0x42, 0x0b,
		0x68, 0x55, 0x19, 0xb9, 0xa5, 0x42, 0x99, 0x40, 0xe1, 0xb7, 0xd0, 0x67,
		0x04, 0x5d, 0x0b, 0xc8, 0x5b, 0x32, 0xc0, 0x22, 0x9c, 0xd2, 0xe8, 0xed,
		0xa5, 0xb4, 0x17, 0x46, 0x3e, 0x5f, 0xa1, 0x03, 0xd0, 0x83, 0xeb, 0x96,
		0xc7, 0xaf, 0x98, 0xd7, 0x3a, 0xd2, 0x73, 0x91, 0x96, 0xe2, 0x49, 0xb4,
		0xc1, 0xb1, 0x8f, 0x8b, 0xe2, 0x47, 0x33, 0xa2, 0x1f, 0x05, 0xf9, 0x72,
		0xce, 0x88, 0xfb, 0xbe, 0xc8, 0x39, 0x8c, 0xba, 0xae, 0xb7, 0x4e, 0x70,
		0x0d, 0xe8, 0x24, 0x11, 0x18, 0x92, 0x04, 0x40, 0x5b, 0x81, 0x3f, 0xbe,
		0x73, 0xbb, 0xa2, 0x2d, 0x4c, 0xb7, 0x90, 0x5d, 0x1c, 0xee, 0xb6, 0x2c,
		0x9a, 0x23, 0x3b, 0x9c, 0x6c, 0xd7, 0xd8, 0xb5, 0x59, 0x5f, 0xd6, 0x58,
		0x71, 0x1b, 0x46, 0xa7, 0x9b, 0x48, 0xce, 0xea, 0x75, 0x53, 0x57, 0x50,
		0x8d, 0x22, 0xd9, 0x8f, 0xd8, 0xe4, 0x34, 0x1a, 0xf0, 0x6e, 0x58, 0x29,
		0xb4, 0x47, 0xec, 0xf3, 0x62, 0x84, 0x42, 0xdd, 0x71, 0xe0, 0x32, 0x19,
		0xdc, 0x3f, 0xbe, 0x2a, 0xe0, 0x20, 0xfd, 0x2e, 0x53, 0xc8, 0xe1, 0xfb,
		0x34, 0x5e, 0x64, 0x8d, 0xb0, 0x4d, 0x16, 0x68, 0x16, 0x03, 0x27, 0x59,
		0xa0, 0x87, 0x42, 0xbb, 0x91, 0xac, 0x39, 0x72, 0x0b, 0x09, 0x63, 0x21,
		0xad, 0xe3, 0x54, 0x8c, 0x4f, 0x28, 0x66, 0x26, 0x5c, 0xab, 0x1c, 0x28,
		0xf9, 0xf5, 0x0d, 0x96, 0x23, 0xbb, 0x0c, 0xe4, 0x5f, 0xde, 0x1c, 0x31,
		0xb9, 0x11, 0xb8, 0xdc, 0xee, 0xcb, 0x8d, 0xc3, 0xb5, 0xf2, 0x0e, 0x1a,
		0x8b, 0x39, 0x34, 0x73, 0x75, 0x75, 0x5e, 0x35, 0x1d, 0x3f, 0x5b, 0xa5,
		0xd5, 0x1d, 0x34, 0x74, 0x72, 0x4d, 0x65, 0xaf, 0xbd, 0xed, 0x9e, 0x54,
		0x48, 0xef, 0x6d, 0xac, 0xa5, 0x38, 0x9c, 0x30, 0x02, 0xc1, 0x2a, 0x0f,
		0x1f, 0x3a, 0x30, 0x44, 0x16, 0x01, 0x89, 0xd0, 0x91, 0x27, 0x50, 0x64,
		0x00, 0xd0, 0xa7, 0x62, 0x4d, 0xeb, 0x8e, 0x1b, 0x81, 0x85, 0x5e, 0xdf,
		0xb8, 0xea, 0x6f, 0xc4, 0x6e, 0xd8, 0x91, 0xc9, 0x6f, 0xb1, 0x6c, 0x92,
		0x3c, 0x73, 0xb2, 0xde, 0x0e, 0xf5, 0x6d, 0x70, 0x5a, 0xca, 0xf5, 0x76,
		0x5e, 0x1b, 0x6a, 0x6d, 0x5c, 0xa6, 0xac, 0xa5, 0xf1, 0x59, 0x59, 0x77,
		0x79, 0xcc, 0xba, 0x2a, 0x0c, 0x5a, 0x11, 0x33, 0xec, 0x71, 0xc9, 0x97,
		0x39, 0x71, 0xf7, 0x96, 0x8f, 0x10, 0x5c, 0xcd, 0x18, 0x0a, 0x4f, 0xe5,
		0x18, 0x84, 0xc3, 0xf1, 0x6c, 0x12, 0x19, 0x96, 0x18, 0x76, 0xff, 0x88,
		0x27, 0x18, 0xaa, 0xf3, 0x83, 0x3f, 0xa0, 0x22, 0x60, 0x4d, 0x9b, 0xcb,
		0x9a, 0xb5, 0xb1, 0xce, 0x03, 0xfc, 0x99, 0xd3, 0xd8, 0x09, 0xa9, 0xe7,
		0x8c, 0x2a, 0x53, 0xe2, 0x63, 0x66, 0x53, 0xc4, 0x33, 0xea, 0x84, 0x77,
		0x46, 0xfe, 0x76, 0x7c, 0xac, 0xc7, 0x22, 0x58, 0x9b, 0x19, 0xf1, 0xd2,
		0x42, 0x32, 0xa5, 0x6d, 0xe9, 0xa0, 0x78, 0x54, 0x3f, 0x03, 0x74, 0x92,
		0xda, 0x8c, 0x5d, 0xb8, 0xeb, 0x00, 0x0b, 0x2f, 0xbd, 0x58, 0x88, 0x61,
		0xe0, 0x2d, 0x0a, 0xe8, 0x76, 0x59, 0x0c, 0x6d, 0x1a, 0x69, 0xf2, 0xfe,
		0x1c, 0x71, 0xb3, 0xee, 0x06, 0x79, 0x71, 0xaf, 0xe1, 0xe3, 0x0f, 0x46,
		0xd9, 0x19, 0x3e, 0x6b, 0x29, 0x28, 0x30, 0xdf, 0xc5, 0xe1, 0xd7, 0x95,
		0x4c, 0xfb, 0xb9, 0x74, 0xcc, 0xbf, 0x0b, 0xf1, 0x6d, 0x51, 0xe5, 0x22,
		0x83, 0x23, 0xe4, 0x81, 0x76, 0x07, 0x79, 0x16, 0x7b, 0xec, 0x38, 0x2c,
		0x91, 0xdb, 0xb9, 0xa7, 0x00, 0x22, 0x19, 0x90, 0x99, 0x9d, 0x99, 0xd4,
		0xc2, 0xbf, 0xc3, 0x50, 0xfb, 0xfa, 0x87, 0x7c, 0xa3, 0x4a, 0x96, 0x0a,
		0xa7, 0x29, 0x0a, 0x0b, 0x64, 0x6d, 0xaa, 0xc8, 0xc7, 0x7e, 0x99, 0x54,
		0xb4, 0xcf, 0x81, 0x02, 0x87, 0xe4, 0x2a, 0x0e, 0x08, 0xea, 0x50, 0xa3,
		0xc7, 0x56, 0x4f, 0x26, 0xb6, 0x3a, 0xb1, 0xd5, 0x89, 0xad, 0x4e, 0x6c,
		0x75, 0x62, 0xab, 0x13, 0x5b, 0x9d, 0xd8, 0xea, 0xc4, 0x56, 0xff, 0x24,
		0xb6, 0xba, 0xc5, 0xf0, 0x8f, 0x03, 0xc1, 0x17, 0x70, 0x53, 0xa3, 0x33,
		0xc2, 0x84, 0x5f, 0xc6, 0x4c, 0xfb, 0x8a, 0xbb, 0x08, 0x6a, 0x5f, 0xf6,
		0x45, 0x3c, 0x75, 0x94, 0x45, 0x0b, 0xf1, 0xed, 0x74, 0xb5, 0xaf, 0xf3,
		0x6a, 0xac, 0x95, 0x49, 0xc3, 0x0e, 0x73, 0x1d, 0x21, 0xa9, 0xc3, 0x90,
		0xf8, 0x5c, 0x35, 0xd3, 0xf1, 0x79, 0x5f, 0xe4, 0xbf, 0xd4, 0x5d, 0xc5,
		0xb7, 0xf1, 0x93, 0x81, 0xa0, 0x4b, 0x55, 0x64, 0x13, 0xdf, 0xd4, 0x4d,
		0x57, 0xe2, 0x7d, 0x71, 0x5a, 0x69, 0x64, 0x6f, 0xbb, 0x48, 0x91, 0x31,
		0xfb, 0xdf, 0xa2, 0x2c, 0xaf, 0x64, 0xbd, 0x15, 0x7d, 0xc2, 0xb3, 0x38,
		0xfa, 0x0a, 0x61, 0x45, 0x1f, 0xf9, 0xa5, 0x77, 0x88, 0x92, 0xec, 0x9a,
		0xf9, 0x58, 0xb0, 0xa5, 0x53, 0xd2, 0x83, 0xf7, 0x62, 0xd2, 0x6b, 0x1d,
		0xf4, 0x4c, 0xee, 0xf4, 0xcf, 0xe8, 0x6c, 0xfd, 0x6b, 0x00, 0x63, 0xd4,
		0xc7, 0xb2, 0x9d, 0xff, 0xe3, 0xca, 0x85, 0x6e, 0x29, 0x24, 0xc3, 0x56,
		0x99, 0x07, 0xa8, 0xa8, 0x62, 0x4e, 0x7d, 0x26, 0x13, 0x79, 0xcc, 0xf0,
		0x4b, 0x47, 0x19, 0xf6, 0x3d, 0x58, 0x5c, 0xa5, 0x85, 0xff, 0xe0, 0x8c,
		0xca, 0x60, 0x2b, 0x2b, 0xe4, 0xb0, 0xeb, 0x15, 0xc9, 0x93, 0x9f, 0x03,
		0x83, 0x97, 0x4d, 0xc3, 0x79, 0x1e, 0x08, 0x6e, 0xd4, 0x17, 0x5d, 0x22,
		0x73, 0x73, 0xe2, 0xd9, 0x76, 0x59, 0x06, 0x85, 0xda, 0xf1, 0x57, 0xcd,
		0x84, 0x2a, 0x7b, 0x9f, 0x63, 0xe1, 0x26, 0xc9, 0xd5, 0x97, 0x9d, 0x14,
		0xbf, 0xc7, 0x14, 0x9d, 0x5d, 0xc5, 0x38, 0x4c, 0xf6, 0x21, 0xfe, 0x89,
		0x62, 0xfe, 0x06, 0xc1, 0xc8, 0x8e, 0x26, 0x4f, 0x5e, 0x9d, 0xf8, 0x33,
		0x53, 0x5f, 0xed, 0xad, 0x8f, 0xd5, 0xe4, 0xfe, 0x1c, 0xde, 0x54, 0xe1,
		0x1e, 0xfd, 0xed, 0x47, 0xb7, 0xef, 0x48, 0x8f, 0xdc, 0xf6, 0x8b, 0xc9,
		0xbe, 0x1c, 0x77, 0x44, 0x7f, 0x7f, 0xaa, 0xfb, 0xe3, 0x44, 0x75, 0x27,
		0xaa, 0x3b, 0x51, 0xdd, 0x89, 0xea, 0x4e, 0x54, 0x77, 0xa2, 0xba, 0x13,
		0xd5, 0x9d, 0xa8, 0xee, 0x1f, 0x4c, 0x75, 0x2d, 0xd3, 0xdd, 0x8b, 0x84,
		0xbe, 0x80, 0x7b, 0xee, 0x43, 0x39, 0xf7, 0x60, 0x9a, 0xdf, 0x4a, 0x30,
		0xb7, 0xb3, 0xc7, 0x3e, 0x69, 0x7c, 0x85, 0x86, 0x56, 0x76, 0x34, 0xdf,
		0xdc, 0xd0, 0xbe, 0xf8, 0x97, 0x52, 0x6a, 0x07, 0xd5, 0x3b, 0x39, 0x0b,
		0x81, 0x5e, 0x0a, 0xf6, 0xf9, 0x85, 0x92, 0x4b, 0x1c, 0x82, 0xae, 0x74,
		0x75, 0x07, 0x5b, 0xdb, 0xcd, 0xd7, 0x69, 0xe3, 0xe4, 0x8e, 0x9c, 0xed,
		0xb1, 0x90, 0x6f, 0x71, 0x5d, 0xc1, 0x28, 0x0b, 0x1f, 0x06, 0xfe, 0x7c,
		0x95, 0x27, 0x25, 0xb7, 0x02, 0x92, 0xea, 0x91, 0x23, 0xa5, 0xf7, 0x57,
		0x32, 0xd4, 0xfb, 0xd7, 0xc7, 0x8b, 0x5f, 0x63, 0x6c, 0x8f, 0xab, 0xbb,
		0x62, 0xf9, 0xa4, 0xa0, 0xc6, 0xbc, 0xc6, 0xf9, 0x30, 0x8a, 0x7c, 0x71,
		0x97, 0x0a, 0x11, 0xe7, 0x17, 0x64, 0xb0, 0xf2, 0xa2, 0xdf, 0x95, 0x5d,
		0xe9, 0xd3, 0xff, 0x26, 0x16, 0xb1, 0x2f, 0x79, 0xb0, 0xff, 0x6e, 0x18,
		0x60, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x08, 0xad, 0x89, 0x62,
		0x31, 0x00, 0x00,
	},
		"app.js",
	)
}

func index_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x7c, 0x90,
		0x41, 0x4b, 0xc4, 0x30, 0x10, 0x85, 0xef, 0xfd, 0x15, 0x63, 0x4e, 0x0a,
		0xee, 0x8c, 0xeb, 0x7a, 0x72, 0xd3, 0x82, 0xe8, 0x45, 0x05, 0xf1, 0x2f,
		0xcc, 0x26, 0x91, 0x66, 0x69, 0x9a, 0x90, 0x84, 0x96, 0xba, 0xec, 0x7f,
		0xb7, 0x4d, 0xc1, 0x83, 0xa2, 0xa7, 0xcc, 0x7b, 0xcc, 0x97, 0xf7, 0x12,
		0x79, 0xa1, 0xbd, 0xca, 0x53, 0x30, 0xd0, 0x66, 0xd7, 0x35, 0x95, 0x6c,
		0x0d, 0xeb, 0x46, 0x52, 0x39, 0x2a, 0x79, 0xf0, 0x7a, 0x6a, 0x2a, 0x00,
		0xa9, 0xed, 0x00, 0x56, 0xd7, 0x22, 0x7a, 0x9f, 0x45, 0x71, 0x68, 0xb6,
		0xca, 0x90, 0x54, 0xb4, 0x21, 0x43, 0x8a, 0xaa, 0x16, 0x44, 0xe3, 0x38,
		0x62, 0xe0, 0x98, 0x8c, 0xd2, 0x3d, 0x2a, 0xef, 0xe8, 0x98, 0xa8, 0xe8,
		0xcd, 0x16, 0xef, 0xf0, 0x16, 0x9d, 0xed, 0xf1, 0x98, 0xc4, 0x1c, 0xb1,
		0x72, 0xbf, 0xae, 0x68, 0x73, 0x0e, 0xe9, 0x9e, 0xe8, 0xe3, 0x80, 0xce,
		0x50, 0x34, 0xac, 0xf2, 0xe6, 0x06, 0xb7, 0x3b, 0xdc, 0xfd, 0xc7, 0x2e,
		0x23, 0xc0, 0xfb, 0x12, 0x84, 0xb6, 0xb7, 0xd9, 0x72, 0x67, 0x3f, 0xcd,
		0xa5, 0x38, 0x9d, 0xf0, 0x21, 0x84, 0xe7, 0xa7, 0xf3, 0x59, 0x5c, 0xc3,
		0xa2, 0x5e, 0x78, 0xe0, 0x15, 0x79, 0x35, 0xd3, 0xec, 0x5e, 0xed, 0x0b,
		0x39, 0x70, 0x84, 0xc7, 0x8e, 0x53, 0x7a, 0x63, 0x67, 0xa0, 0x2e, 0xab,
		0xdf, 0x7a, 0x5e, 0xdb, 0x97, 0x27, 0xff, 0x51, 0x99, 0x43, 0xf8, 0xd1,
		0x4b, 0xd2, 0xfa, 0x73, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x0b,
		0x90, 0x95, 0x5f, 0x01, 0x00, 0x00,
	},
		"index.html",
	)
}

func index2_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x64, 0x90,
		0xd1, 0x4f, 0xc2, 0x30, 0x10, 0xc6, 0xdf, 0xf9, 0x2b, 0x6a, 0x9f, 0x34,
		0xd1, 0x76, 0x08, 0xa8, 0x81, 0x41, 0x22, 0x42, 0x14, 0xa7, 0x80, 0x89,
		0x26, 0xf0, 0x58, 0xda, 0xe2, 0x3a, 0xbb, 0x75, 0xec, 0xce, 0x35, 0xf0,
		0xd7, 0x0b, 0xdd, 0x8b, 0xd1, 0xa7, 0x7e, 0xfd, 0x72, 0x77, 0xdf, 0xfd,
		0x2e, 0x3e, 0x53, 0x4e, 0xe2, 0xbe, 0xd4, 0x24, 0xc5, 0xdc, 0x8e, 0x5a,
		0x71, 0xaa, 0x85, 0x1a, 0xc5, 0x3c, 0x3c, 0xad, 0x78, 0xe3, 0xd4, 0x7e,
		0xd4, 0x22, 0x24, 0x56, 0xa6, 0x26, 0x46, 0x0d, 0x69, 0xe5, 0x1c, 0xd2,
		0xe0, 0xf0, 0xa3, 0x15, 0x04, 0xc8, 0xca, 0x94, 0x48, 0xa0, 0x92, 0x43,
		0xca, 0xb9, 0xf7, 0x9e, 0x95, 0xa2, 0x02, 0x2d, 0x55, 0xc1, 0xa4, 0xcb,
		0x79, 0x06, 0x3c, 0xfc, 0xaf, 0xda, 0xac, 0xcb, 0xae, 0x59, 0x6e, 0x0a,
		0x96, 0x01, 0x3d, 0x46, 0x34, 0x7d, 0xbf, 0x46, 0x9c, 0x24, 0x21, 0xcb,
		0x53, 0x31, 0x33, 0x85, 0x41, 0x23, 0xac, 0x39, 0xe8, 0x73, 0xba, 0xf8,
		0x7c, 0x4a, 0x77, 0xf5, 0xfa, 0x90, 0xbd, 0x76, 0xb6, 0xca, 0x8e, 0x93,
		0xbb, 0x28, 0xea, 0x28, 0x35, 0x59, 0x4d, 0xcb, 0x5e, 0x56, 0xbd, 0x2c,
		0x6f, 0xdf, 0xee, 0x61, 0xb1, 0x9a, 0x4e, 0xb6, 0xf4, 0x92, 0xd0, 0x5e,
		0x7d, 0x93, 0xf7, 0x2c, 0x26, 0x33, 0x98, 0x25, 0xa9, 0xdf, 0xee, 0x57,
		0xcf, 0x65, 0xf6, 0xe1, 0xd7, 0xe2, 0xb1, 0x0b, 0x50, 0xe8, 0xb9, 0x9b,
		0xcc, 0xbf, 0x60, 0xd7, 0x4e, 0xc6, 0xf4, 0x62, 0x10, 0xd2, 0x6a, 0x51,
		0x91, 0x07, 0x2b, 0x00, 0xe6, 0x22, 0xd7, 0x64, 0x48, 0xe8, 0xbb, 0xd7,
		0x1a, 0xe9, 0x20, 0x10, 0xfe, 0xdb, 0xb0, 0x81, 0x4c, 0x11, 0xcb, 0x3e,
		0xe7, 0xd6, 0x49, 0x61, 0x53, 0x07, 0xd8, 0xef, 0x44, 0x51, 0xc4, 0x01,
		0x05, 0x1a, 0xc9, 0x37, 0xdf, 0x85, 0xb2, 0xfa, 0x0f, 0x62, 0xcc, 0x9b,
		0x43, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xdc, 0x64, 0xab, 0x6e,
		0x01, 0x00, 0x00,
	},
		"index2.html",
	)
}

func makefile() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x4a, 0xcc,
		0xc9, 0xb1, 0xe2, 0xe2, 0x4c, 0xcf, 0x57, 0x48, 0x4f, 0xcd, 0x4b, 0x2d,
		0x4a, 0x2c, 0x49, 0xe5, 0x02, 0x04, 0x00, 0x00, 0xff, 0xff, 0xab, 0x46,
		0x3b, 0xb1, 0x12, 0x00, 0x00, 0x00,
	},
		"Makefile",
	)
}

func package_json() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xaa, 0x56,
		0x4a, 0x49, 0x2d, 0x48, 0xcd, 0x4b, 0x49, 0xcd, 0x4b, 0xce, 0x4c, 0x2d,
		0x56, 0xb2, 0x52, 0xa8, 0xe6, 0x52, 0x50, 0x50, 0x4a, 0x4a, 0x4c, 0x4a,
		0xcd, 0xd1, 0xcd, 0xc9, 0x4f, 0x4c, 0x49, 0x2d, 0x02, 0x8a, 0x29, 0x69,
		0x29, 0x71, 0xd5, 0xd6, 0x72, 0x01, 0x02, 0x00, 0x00, 0xff, 0xff, 0x48,
		0xdd, 0xb7, 0x02, 0x2c, 0x00, 0x00, 0x00,
	},
		"package.json",
	)
}

func readme_md() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x1c, 0xcb,
		0xb1, 0x0d, 0xc4, 0x20, 0x0c, 0x05, 0xd0, 0xfe, 0xa6, 0xf8, 0x1d, 0xd5,
		0xb1, 0x47, 0xc6, 0x70, 0xc4, 0x87, 0xa0, 0x04, 0x23, 0x81, 0x5d, 0x64,
		0xfb, 0x48, 0x6e, 0x9f, 0xf4, 0x8e, 0x8a, 0x77, 0x3a, 0x58, 0xba, 0xc1,
		0x2e, 0x6e, 0xa2, 0xf6, 0x87, 0x3b, 0x70, 0xf8, 0x0e, 0x54, 0x2c, 0x57,
		0xa4, 0x21, 0x37, 0x13, 0x6c, 0x62, 0xf1, 0xdf, 0xa8, 0x5c, 0x62, 0xc4,
		0xd9, 0xb5, 0x88, 0x49, 0x6e, 0x33, 0x62, 0xfe, 0x7d, 0x01, 0x00, 0x00,
		0xff, 0xff, 0xe0, 0xe5, 0xae, 0x59, 0x51, 0x00, 0x00, 0x00,
	},
		"README.md",
	)
}

func webpack_config_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x2c, 0x8e,
		0xc1, 0x4e, 0xc6, 0x20, 0x10, 0x84, 0xef, 0x7d, 0x8a, 0x3d, 0x98, 0x70,
		0xa9, 0xc5, 0x73, 0x4d, 0xd3, 0x77, 0xf0, 0xaa, 0xc6, 0xd0, 0xb2, 0x9a,
		0x1a, 0x0a, 0x84, 0x5d, 0x12, 0x4c, 0xd3, 0x77, 0x77, 0x81, 0x9f, 0x03,
		0x81, 0x99, 0x6f, 0x67, 0xf6, 0x0c, 0x36, 0x3b, 0x9c, 0xb0, 0xc4, 0x90,
		0x98, 0x60, 0x81, 0x6b, 0x00, 0x40, 0xcf, 0xe9, 0x6f, 0x06, 0x35, 0x69,
		0x4a, 0xbb, 0x3e, 0xbc, 0xc5, 0x32, 0xfd, 0x92, 0x1a, 0xc5, 0x0a, 0x99,
		0x63, 0xe6, 0x19, 0x2e, 0xf8, 0x3e, 0x1c, 0x7a, 0x73, 0xa2, 0x70, 0x26,
		0xc6, 0xea, 0xc3, 0x5d, 0x89, 0x9e, 0x58, 0x09, 0x17, 0x8c, 0xc5, 0x44,
		0x33, 0xbc, 0x8b, 0x0c, 0x22, 0x30, 0x92, 0x8c, 0xea, 0x0f, 0x81, 0xcb,
		0xfa, 0xa4, 0x47, 0x68, 0x3a, 0x3c, 0x40, 0x09, 0xda, 0xcc, 0x86, 0xee,
		0xb9, 0x7f, 0x57, 0x62, 0xf3, 0x83, 0xcb, 0x4b, 0xab, 0xad, 0x07, 0xcb,
		0xee, 0xb2, 0x95, 0x64, 0xed, 0x83, 0xc5, 0xaf, 0xde, 0x43, 0xba, 0xb9,
		0xb7, 0xdc, 0x9f, 0xbd, 0x1f, 0x0b, 0x63, 0xf2, 0xc6, 0x51, 0x5d, 0x41,
		0x25, 0x34, 0x3b, 0x2b, 0x89, 0x7e, 0x6b, 0x0f, 0x01, 0xef, 0xd7, 0xe1,
		0x3f, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x4d, 0xe5, 0x8a, 0xf5, 0x00, 0x00,
		0x00,
	},
		"webpack.config.js",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	".gitignore": gitignore,
	"app.js": app_js,
	"index.html": index_html,
	"index2.html": index2_html,
	"Makefile": makefile,
	"package.json": package_json,
	"README.md": readme_md,
	"webpack.config.js": webpack_config_js,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"package.json": &_bintree_t{package_json, map[string]*_bintree_t{
	}},
	"README.md": &_bintree_t{readme_md, map[string]*_bintree_t{
	}},
	"webpack.config.js": &_bintree_t{webpack_config_js, map[string]*_bintree_t{
	}},
	".gitignore": &_bintree_t{gitignore, map[string]*_bintree_t{
	}},
	"app.js": &_bintree_t{app_js, map[string]*_bintree_t{
	}},
	"index.html": &_bintree_t{index_html, map[string]*_bintree_t{
	}},
	"index2.html": &_bintree_t{index2_html, map[string]*_bintree_t{
	}},
	"Makefile": &_bintree_t{makefile, map[string]*_bintree_t{
	}},
}}
